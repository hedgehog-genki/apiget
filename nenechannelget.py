# -*- coding: utf-8 -*-
"""nenechannelget.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HQRzlwxfuw3zCCelvhUyiQLqYNhzovlu

##ライブラリのインポート
"""

import pandas as pd
import numpy as np
import json
from apiclient.discovery import build
DEVELOPER_KEY = [DEVELOPER]
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"
CHANNEL_ID = 'UCAWSyEs_Io8MtpY3m-zqILA'
channels = []
searches = []
videos = []
nextPagetoken = None
nextpagetoken = None
youtube = build(YOUTUBE_API_SERVICE_NAME,YOUTUBE_API_VERSION,developerKey=DEVELOPER_KEY)

"""##アーカイブ情報の取得"""

channel_response = youtube.channels().list(
    part = 'snippet,statistics',
    id = CHANNEL_ID
    ).execute()

for channel_result in channel_response.get("items", []):
  if channel_result["kind"] == "youtube#channel":
    channels.append([channel_result["snippet"]["title"],channel_result["statistics"]["subscriberCount"],channel_result["statistics"]["videoCount"],channel_result["snippet"]["publishedAt"]])

while True:
    if nextPagetoken != None:
        nextpagetoken = nextPagetoken

    search_response = youtube.search().list(
      part = "snippet",
      channelId = CHANNEL_ID,
      maxResults = 50,
      order = "date", #日付順にソート
      pageToken = nextpagetoken #再帰的に指定
      ).execute()  

    for search_result in search_response.get("items", []):
        if search_result["id"]["kind"] == "youtube#video":
            searches.append(search_result["id"]["videoId"])

    try:
        nextPagetoken =  search_response["nextPageToken"]
    except:
        break
   
for result in searches:
    video_response = youtube.videos().list(
      part = 'snippet,statistics',
      id = result
      ).execute()

    for video_result in video_response.get("items", []):
        if video_result["kind"] == "youtube#video":
            videos.append([video_result["snippet"]["title"],video_result["statistics"]["viewCount"],video_result["snippet"]["publishedAt"]])

df_info = pd.DataFrame(list(videos))
df_id = pd.DataFrame(list(searches))
df = pd.concat([df_id,df_info],axis=1)

#アーカイブURLの作成
archiveurl = []
for id in searches:
  pre_url = "https://www.youtube.com/watch?v=id"
  url =pre_url.replace('id',id)
  archiveurl.append(url)

#サムネイルURLの作成
archiveimg = []
for id in searches:
  pre_thumb = "http://img.youtube.com/vi/id/hqdefault.jpg"
  thumb_url = pre_thumb.replace('id',id)
  archiveimg.append(thumb_url)

df_url = pd.DataFrame(list(zip(archiveurl,archiveimg)))
df_nene = pd.concat([df,df_url],axis=1)
df_nene.columns = ['id','archivetitle','archiveviews','archivepostdate','archiveurl','archiveimg']
df_nene.to_csv("nenechannel.csv")

"""##切り抜き動画の取得（再生数順）"""

clip_list = []
clip_id=[]
while True:
    if nextPagetoken != None:
        nextpagetoken = nextPagetoken

    search_response2 = youtube.search().list(
      part = "snippet",
      q='桃鈴ねね+切り抜き',
      maxResults = 100,
      order = "view", #再生数順
      pageToken = nextpagetoken #再帰的に指定
      ).execute()  

    for search_result in search_response2.get("items", []):
        if search_result["id"]["kind"] == "youtube#video":
            clip_id.append(search_result["id"]["videoId"])

    try:
        nextPagetoken =  search_response["nextPageToken"]
    except:
        break
   
for result in clip_id:
    clip_response = youtube.videos().list(
      part = 'snippet,statistics',
      id = result
      ).execute()

    for clip_result in clip_response.get("items", []):
        if clip_result["kind"] == "youtube#video":
            clip_list.append([clip_result["snippet"]["title"],clip_result["statistics"]["viewCount"],clip_result["snippet"]["publishedAt"]])
df_clipid = pd.DataFrame(list(clip_id))
df_clipinfo = pd.DataFrame(list(clip_list))
#切り抜きURLの作成
clipurl = []
for id in clip_id:
  pre_url = "https://www.youtube.com/watch?v=id"
  url =pre_url.replace('id',id)
  clipurl.append(url)
#サムネイルURLの作成
clipimg = []
for id in clip_id:
  pre_thumb = "http://img.youtube.com/vi/id/hqdefault.jpg"
  thumb_url = pre_thumb.replace('id',id)
  clipimg.append(thumb_url)

df_clipurl = pd.DataFrame(list(zip(clipurl,clipimg)))
df_neneclip = pd.concat([df_clipid,df_clipinfo,df_clipurl],axis=1)
df_neneclip.columns = ['id','cliptitle','clipviews','clippostdate','clipurl','clipimg']

"""##切り抜き動画（日付順）"""

clip_list_date = []
clip_id_date=[]
while True:
    if nextPagetoken != None:
        nextpagetoken = nextPagetoken

    search_response_date = youtube.search().list(
      part = "snippet",
      q='桃鈴ねね+切り抜き',
      maxResults = 100,
      order = "date", #再生数順
      pageToken = nextpagetoken #再帰的に指定
      ).execute()  

    for search_result in search_response_date.get("items", []):
        if search_result["id"]["kind"] == "youtube#video":
            clip_id_date.append(search_result["id"]["videoId"])

    try:
        nextPagetoken =  search_response["nextPageToken"]
    except:
        break
   
for result in clip_id_date:
    clip_response_date = youtube.videos().list(
      part = 'snippet,statistics',
      id = result
      ).execute()

    for clip_result in clip_response_date.get("items", []):
        if clip_result["kind"] == "youtube#video":
            clip_list_date.append([clip_result["snippet"]["title"],clip_result["statistics"]["viewCount"],clip_result["snippet"]["publishedAt"]])

#切り抜きURLの作成
clipurl_date = []
for id in clip_id_date:
  pre_url = "https://www.youtube.com/watch?v=id"
  url =pre_url.replace('id',id)
  clipurl_date.append(url)

#サムネイルURLの作成
clipimg_date = []
for id in clip_id_date:
  pre_thumb = "http://img.youtube.com/vi/id/hqdefault.jpg"
  thumb_url = pre_thumb.replace('id',id)
  clipimg_date.append(thumb_url)

df_clipurl_date = pd.DataFrame(list(zip(clipurl_date,clipimg_date)))
df_clipid_date = pd.DataFrame(list(clip_id_date))
df_clipinfo_date = pd.DataFrame(list(clip_list_date))
df_neneclip_date = pd.concat([df_clipid_date,df_clipinfo_date,df_clipurl_date],axis=1)
df_neneclip_date.columns = ['id','cliptitle','clipviews','clippostdate','clipurl','clipimg']
df_neneclip_master = pd.concat([df_neneclip,df_neneclip_date],axis=0)
df_neneclip_master.to_csv("neneclipmaster.csv")